// Generated by CoffeeScript 1.3.3
(function() {
  var Itertools, exports, factorial, _memofactorial;

  _memofactorial = new Array();

  factorial = function(n) {
    if (n === 0 || n === 1) {
      return 1;
    }
    if (_memofactorial[n] > 0) {
      return _memofactorial[n];
    } else {
      _memofactorial[n] = factorial(n - 1) * n;
      return _memofactorial[n];
    }
  };

  Itertools = (function() {

    function Itertools() {}

    Itertools.prototype.permutationsSync = function(iterable, r) {
      var cycles, i, indices, j, jj, n, numPerms, perms, pool, slice, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _results, _results1;
      if (r == null) {
        r = iterable.length;
      }
      if (typeof iterable === 'string') {
        iterable = iterable.split("");
      }
      if (!(iterable instanceof Array)) {
        throw "iterable must be a string or array";
      }
      pool = iterable.slice(0);
      n = pool.length;
      if (typeof r !== 'number' || r % 1 !== 0) {
        throw "r must be an integer";
      }
      if (r > n) {
        throw "r must be smaller than iterable length";
      }
      if (r < 0) {
        throw "r must be non-negative";
      }
      indices = (function() {
        _results = [];
        for (var _i = 0, _ref = n - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      cycles = (function() {
        _results1 = [];
        for (var _j = n, _ref1 = n - r + 1; n <= _ref1 ? _j <= _ref1 : _j >= _ref1; n <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
        return _results1;
      }).apply(this);
      perms = [
        (function() {
          var _k, _len, _ref2, _results2;
          _ref2 = indices.slice(0, r);
          _results2 = [];
          for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
            i = _ref2[_k];
            _results2.push(pool[i]);
          }
          return _results2;
        })()
      ];
      numPerms = factorial(n) / factorial(n - r);
      while (perms.length < numPerms) {
        for (i = _k = _ref2 = r - 1; _ref2 <= 0 ? _k <= 0 : _k >= 0; i = _ref2 <= 0 ? ++_k : --_k) {
          cycles[i] -= 1;
          if (cycles[i] === 0) {
            slice = indices.slice(i + 1).concat(indices.slice(i, i + 1));
            Array.prototype.splice.apply(indices, [i, slice.length].concat(slice));
            cycles[i] = n - i;
          } else {
            jj = cycles[i];
            j = indices.length - jj;
            _ref3 = [indices[j], indices[i]], indices[i] = _ref3[0], indices[j] = _ref3[1];
            perms.push((function() {
              var _l, _len, _ref4, _results2;
              _ref4 = indices.slice(0, r);
              _results2 = [];
              for (_l = 0, _len = _ref4.length; _l < _len; _l++) {
                i = _ref4[_l];
                _results2.push(pool[i]);
              }
              return _results2;
            })());
            break;
          }
        }
      }
      return perms;
    };

    return Itertools;

  })();

  module.exports = exports = new Itertools();

}).call(this);
